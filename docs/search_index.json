[
["11-3-multivariate-linear-regression.html", "11.3 Multivariate linear regression", " 11.3 Multivariate linear regression In this chapter, I will illustrate developing a forecasting model using a multivariate regression (MREG). I will show the approach the Stergiou and Christou used to develop MREG models and then compare to other approaches. Fitting multivariate linear regressions with ARMA errors and fitting ARMAX models will be covered in separate chapters. A multivariate linear regression model with Gaussian errors take the form: \\[\\begin{equation} \\begin{gathered} x_t = \\alpha + \\phi_1 c_{t,1} + \\phi_2 c_{t,2} + \\dots + e_t \\\\ e_t \\sim N(0,\\sigma) \\end{gathered} \\end{equation}\\] In R, we can fit this model with lm(), which uses ordinary least squares (OLS). For model selection (determining what explanatory variables to include), there are a variety of approaches we can take. I will show approaches that use a few different packages. library(ggplot2) library(MASS) library(car) library(glmnet) library(Hmisc) library(stringr) library(caret) library(leaps) 11.3.1 Covariates used in Stergiou and Christou Stergiou and Christou used five environmental covariates: air temperature (air), sea-level pressure (slp), sea surface temperature (sst), vertical wind speed (vwnd), and wind speed cubed (wspd3). Monthly values for these covariates in three 1 degree boxes were taken from the COADS database, and then a yearly average over all months in the three boxes was used to compute a yearly average. These yearly average environmental covariates are in covsmean.year, which is part of landings.RData. load(&quot;landings.RData&quot;) colnames(covsmean.year) ## [1] &quot;Year&quot; &quot;air.degC&quot; &quot;slp.millibars&quot; &quot;sst.degC&quot; ## [5] &quot;vwnd.m/s&quot; &quot;wspd3.m3/s3&quot; The covariates are those in Stergiou and Christou with the following differences. I used the ICOADS data not the COADS. The boxes are 1 degree but on 1 degree centers not 0.5 centers. Thus box is 39.5-40.5 not 39-40. ICOADS does not include ‘vertical wind’. I used NS winds which may be different. The code to download the ICOADS data is in the appendix. In addition to the environmental covariates, Stergiou and Christou used many covariates of fishing effort for trawlers, purse seiners, beach seiners, other coastal boats and demersal (sum of trawlers, beach seiners and other coastal boats). For each fishery type, they used data on number of fishers (FI), number of boats (BO), total engine horse power (HP), total boat tonnage (TO). They also used an economic variable: value (VA) of catch for trawlers, purse seiners, beach seiners, other coastal boats. colnames(fish.cov) ## [1] &quot;Year&quot; &quot;Boats.BO&quot; &quot;Trawlers.BOT&quot; ## [4] &quot;Purse.seiners.BOP&quot; &quot;Beach.seiners.BOB&quot; &quot;Other.BOC&quot; ## [7] &quot;Demersal.BOD&quot; &quot;Fishers.FI&quot; &quot;Trawlers.FIT&quot; ## [10] &quot;Purse.seiners.FIP&quot; &quot;Beach.seiners.FIB&quot; &quot;Other.FIC&quot; ## [13] &quot;Demersal.FID&quot; &quot;Horsepower.HP&quot; &quot;Trawler.HPT&quot; ## [16] &quot;Purse.seiners.HPP&quot; &quot;Beach.seiners.HPB&quot; &quot;Other.HPC&quot; ## [19] &quot;Demersal.HPD&quot; &quot;Trawler.VAT&quot; &quot;Purse.seiners.VAP&quot; ## [22] &quot;Beach.seiners.VAB&quot; &quot;Other.VAC&quot; &quot;Tonnage.TO&quot; ## [25] &quot;Trawlers.TOT&quot; &quot;Purse.seiners.TOP&quot; For anchovy, the fishery effort metrics from the purse seine fishery were used. Lastly, biological covariates were included which were the landings of other species. Stergiou and Christou state (page 118) that the other species modelled by VAR (page 114) was included. This would mean sardine was used as an explanatory variable. However in Table 3 (page 119), it appears that Trachurus (Horse mackerel) was included. It is not clear if sardine was also included but not chosen as an important variable. I included Trachurus and not sardine as the biological explanatory variable. Preparing the data frame We will model anchovy landings as the response variable. The covariates are lagged by one year, following Stergiou and Christou. This means that the catch in year \\(t\\) is regressed against the covariates in year \\(t-1\\). We set up our data frame as follows. We use the 1965 to 1987 catch data as the response. We use 1964 to 1986, so year prior, for all the explanatory variables and we log transform the explanatory variables (following Stergiou and Christou). We use \\(t\\) 1 to 23 as a “year” covariate. Our data frame will have the following columns: colnames(df) ## [1] &quot;anchovy&quot; &quot;Year&quot; &quot;Trachurus&quot; &quot;air&quot; &quot;slp&quot; ## [6] &quot;sst&quot; &quot;vwnd&quot; &quot;wspd3&quot; &quot;BOP&quot; &quot;FIP&quot; ## [11] &quot;HPP&quot; &quot;TOP&quot; In total, there are 11 covariates and 23 years of data—which is not much data per explanatory variable. Section @ref(cov.df) shows the R code to create the df data frame with the response variable and all the explanatory variables. For most of the analyses, we will use the untransformed variables, however for some analyses, we will want the effect sizes (the estimated \\(\\beta\\)’s) to be on the same scale. For these analyses, we will use the z-scored variables, which will be stored in data frame dfz. z-scoring removes the mean and normalizes the variance to 1. dfz &lt;- df for(i in colnames(df)){ pop_sd &lt;- sd(df[,i])*sqrt((length(df[,i])-1)/(length(df[,i]))) pop_mean &lt;- mean(df[,i]) dfz[,i] &lt;- (df[,i]-pop_mean)/pop_sd } 11.3.2 Collinearity Collinearity is near-linear relationships among the explanatory variables. Collinearity causes many problems such as inflated standard errors of the coefficients and correspondingly unbiased but highly imprecise estimates of the coefficients, false p-values, and poor predictive accuracy of the model. Thus it is important to evaluate the level of collinearity in your explanatory variables. Pairs plot One way to see this is visually is with the pairs() plot. A pairs plot of fishing effort covariates reveals high correlations between Year, HPP and TOP. pairs(df[,c(2,9:12)]) The environmental covariates look generally ok. pairs(df[,c(2,4:8)]) Variance inflation factors Another way is to look for collinearity is to compute the variance inflation factors (VIF). The variance inflation factor is an estimate of how much larger the variance of a coefficient estimate is compared to if the variable were uncorrelated with the other explanatory variables in the model. If the VIF of variable \\(i\\) is \\(z\\), then the standard error of the \\(\\beta_i\\) for variable \\(i\\) is \\(\\sqrt{z}\\) times larger than if variable \\(i\\) were uncorrelated with the other variables. For example, if VIF=10, the standard error of the coefficient estimate is 3.16 times larger (inflated). The rule of thumb is that any of the variables with VIF greater than 10 have collinearity problems. The vif() function in the car package will compute VIFs for us. full &lt;- lm(anchovy ~ ., data=df) car::vif(full) ## Year Trachurus air slp sst vwnd ## 103.922970 18.140279 3.733963 3.324463 2.476689 2.010485 ## wspd3 BOP FIP HPP TOP ## 1.909992 13.676208 8.836446 63.507170 125.295727 This shows that Year, HPP and TOP have severe collinearity problems, and BOP and Trachusus also have collinearity issues, though lesser. 11.3.2.1 redun() The Hmisc library also has a redundancy function (redun()) that can help identify which variables are redundant. This identifies variables that can be explained with an \\(R^2&gt;0.9\\) by a linear (or non-linear) combination of other variables. We are fitting a linear model, so we set nk=0 to force redun() to only look at linear combinations. We use redun() only on the explanatory variables and thus remove the first column, which is our response variable (anchovy). a &lt;- Hmisc::redun(~ .,data=df[,-1], nk=0) a$Out ## [1] &quot;TOP&quot; &quot;HPP&quot; This indicates that TOP and HPP can be explained by the other variables. 11.3.3 Effect of collinearity One thing that happens when we have collinearity is that we will get “complementary” (negative matched by positive) and very large coefficients in the variables that are collinear. We see this when we fit a linear regression with all the variables. I use the z-scored data so that the effect sizes (x-axis) are on the same scale. The Year coefficients is very large and the TOP and HPP coefficients are negative and very large. If we look at the fit, we see the at the standard errors for Year, TOP and HPP are very large. The p-value for Year is significant, however we know that in the presence of severe collinearity, reported p-values should not be trusted. summary(fit.full) ## ## Call: ## lm(formula = anchovy ~ ., data = dfz) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.4112 -0.1633 -0.0441 0.1459 0.5009 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -9.171e-15 7.003e-02 0.000 1.0000 ## Year 2.118e+00 7.139e-01 2.966 0.0128 * ## Trachurus -6.717e-02 2.983e-01 -0.225 0.8260 ## air 2.987e-01 1.353e-01 2.207 0.0495 * ## slp -5.023e-02 1.277e-01 -0.393 0.7016 ## sst -7.250e-02 1.102e-01 -0.658 0.5242 ## vwnd 1.530e-01 9.930e-02 1.540 0.1517 ## wspd3 6.086e-02 9.679e-02 0.629 0.5423 ## BOP 3.137e-01 2.590e-01 1.211 0.2512 ## FIP 1.347e-01 2.082e-01 0.647 0.5309 ## HPP -5.202e-01 5.581e-01 -0.932 0.3713 ## TOP -8.068e-01 7.839e-01 -1.029 0.3255 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3359 on 11 degrees of freedom ## Multiple R-squared: 0.946, Adjusted R-squared: 0.8921 ## F-statistic: 17.53 on 11 and 11 DF, p-value: 2.073e-05 Stergiou and Christou do not state how (if at all) they address the collinearity in the explanatory variables, but it is clearly present. 11.3.4 Model selection with stepwise variable selection Stergiou and Christou state that the covariates to include were selected with stepwise variable selection. Stepwise variable selection is a type of automatic variable selection. Stepwise variable selection has many statistical problems and the problems are worse when the covariates are collinear as they are in our case (see this link for a review of the problems with stepwise variable selection). The jist of the problem is one of over-fitting. A stepwise selection procedure will tend to choose variables that, by chance, have large coefficients. With only 23 data points and high collinearity, this is likely to be a rather large problem for our dataset. As we saw, collinearity tends to cause very large positive effect sizes offset by large negative effect sizes. However I use stepwise variable selection here to replicate Stergiou and Christou. I will follow this with an example of other more robust approaches to model selection for linear regression. Stergiou and Christou do not give specifics on how they implemented stepwise variable selection. Stepwise variable selection refers to a forward-backward search, however there are many ways we can implement this and different approaches give different answers. The starting model in particular will have a large effect on the ending model. I will illustrate a number of approaches for doing stepwise variable selection using R. step() When using the step() function in the stats package (and the related stepAIC() function in the MASS package) , we specify the starting model and the scope of the search, i.e., the smallest model and the largest model. We set direction equal to “both” to specify stepwise variable selection. We also need to specify the selection criteria. The default is to use AIC. Let’s start with a search that starts with a full model which has all the explanatory variables. The first argument to step() is the starting model and scope specifies the maximum and minimum models as a list. direction=&quot;both&quot; is stepwise variable selection. trace=0 turns off the reporting. null &lt;- lm(anchovy ~ 1, data=df) full &lt;- lm(anchovy ~ ., data=df) step.full &lt;- step(full, scope=list(lower=null, upper=full), direction=&quot;both&quot;, trace = 0) step.full ## ## Call: ## lm(formula = anchovy ~ Year + air + vwnd + BOP + FIP + TOP, data = df) ## ## Coefficients: ## (Intercept) Year air vwnd BOP ## -5.6500 0.1198 3.7000 0.1320 1.8051 ## FIP TOP ## 1.0189 -1.7894 We can also apply step() with the caret package: step.caret &lt;- caret::train(anchovy ~ ., data = df, method = &quot;lmStepAIC&quot;, direction = &quot;both&quot;, trace = FALSE ) ## Warning: attempting model selection on an essentially perfect fit is ## nonsense ## Warning: attempting model selection on an essentially perfect fit is ## nonsense ## Warning: attempting model selection on an essentially perfect fit is ## nonsense step.caret$finalModel ## ## Call: ## lm(formula = .outcome ~ Year + air + vwnd + BOP + FIP + TOP, ## data = dat) ## ## Coefficients: ## (Intercept) Year air vwnd BOP ## -5.6500 0.1198 3.7000 0.1320 1.8051 ## FIP TOP ## 1.0189 -1.7894 Note that method=&quot;lmStepAIC&quot; in the train() function will always start with the full model. The AIC for this model is -19.6. This is a larger model than that reported in Table 3 (page 119) of Stergiou and Christou. The model in Table 3 includes only Year, Trachurus catch, SST, and FIP. The model selected by step() starting from the full model includes Year, Trachurus catch, air temperature, vertical wind, BOP, FIP and TOP. Let’s repeat but start the search with the smallest model. null &lt;- lm(anchovy ~ 1, data=df) full &lt;- lm(anchovy ~ ., data=df) step.null &lt;- step(null, scope=list(lower=null, upper=full), direction=&quot;both&quot;, trace = 0) step.null ## ## Call: ## lm(formula = anchovy ~ Year + FIP + Trachurus + air, data = df) ## ## Coefficients: ## (Intercept) Year FIP Trachurus air ## -0.51874 0.08663 0.81058 -0.28602 1.62735 This model has an AIC of -18.7. This AIC is larger (worse), which illustrates that you need to be careful how you set up the search. This selected model is very similar to that in Table 3 except that air temperature instead of SST is selected. Air temperature and SST are correlated, however. The air temperature is removed from the best model if we use BIC as the model selection criteria. This is done by setting k=log(n) where \\(n\\) is sample size. step.null.bic &lt;- step(null, scope=list(lower=null, upper=full), direction=&quot;both&quot;, trace = 0, k=log(nrow(df))) step.null.bic ## ## Call: ## lm(formula = anchovy ~ Year + FIP + Trachurus, data = df) ## ## Coefficients: ## (Intercept) Year FIP Trachurus ## 2.81733 0.08836 0.98541 -0.30092 We can also do stepwise variable selection using the leaps package. However, the algorithm or starting model is different than for step() and the results are correspondingly different. The results are similar to step() starting from the full model but not identical. See the next section for a brief introduction to the leaps package. models &lt;- leaps::regsubsets(anchovy~., data = df, nvmax =11, method = &quot;seqrep&quot;, nbest=1) plot(models, scale=&quot;bic&quot;) leaps() We can use the leaps package to do a full search of the model space. The function leaps::regsubsets() will find the nbest models of size (number of explanatory variables) 1 to nvmax using different types of searches: exhaustive, forward, backward, and stepwise variable selection. We can then plot these best models of each size against a criteria. such as BIC. leaps allows us to plot against BIC, Cp (asymptotically the same as AIC and LOOCV), \\(R^2\\) and adjusted \\(R^2\\). Each row in the plot is a model. The dark shading shows which variables are in the model. On the y-axis, farther away from the x-axis is better, so the models (rows) at the top of the plot are the best models. Let’s start with an exhaustive search and show only the best model of each size, where size is the number of explanatory variables in the model. models &lt;- leaps::regsubsets(anchovy~., data = df, nvmax = 11, nbest=1, method = &quot;exhaustive&quot;) plot(models, scale=&quot;bic&quot;) We see that when we use BIC as the selection criteria, the best model has Year, Trachurus, and FIP. Let’s look at more than one model for each model size. Let’s take the top 3 models for each model size and look at their BICs. models &lt;- leaps::regsubsets(anchovy~., data = df, nvmax = 11, nbest=3, method = &quot;exhaustive&quot;) plot(models, scale=&quot;bic&quot;) We can plot the BIC for each size of model also. smodels = summary(models) nvar &lt;- apply(smodels$which,1,sum)-1 plot(nvar, smodels$bic, xlab = &quot;Number of Variables&quot;, ylab = &quot;BIC&quot;) min.bic &lt;- which.min(smodels$bic) points(nvar[min.bic], smodels$bic[min.bic], pch = 20, col = &quot;red&quot;) abline(h = smodels$bic[min.bic]+2, lty=2) These two plots show that there are many models within 2 of the top model. All the best models have Year and FIP, but there are many different 3rd and 4th variables that can be added and give a similar BIC. Interesting SST does not appear in any of the top models, while it was selected by Stergiou and Christou. This suggests that they computed the yearly SST values slightly differently than I did. My remote sensing data source was slightly different and that might be the cause. 11.3.4.1 Comparison of models chosen by AIC, AICc and BIC step() uses AIC instead of the AICc (corrected for small sample size). In our case, \\(n=23\\) is fairly small and using AICc would be better suited for such a small dataset. leaps does not return AIC or AICc, but we can compute them. Note that Mallow’s Cp asymptotically has the same ordering as AIC, but \\(n=23\\) is small and it does not have the same ordering as AIC in our case. First we use summary() to get a matrix showing the best model of each size. This matrix shows what variable is in the best model of each size. Note that this best model does not depend on the metric (BIC, AIC, etc) because we are looking at models with the same number of variables. The metric affects the penalty for different number of variables and thus only affects the models choice when we compare models of different sizes. models &lt;- leaps::regsubsets(anchovy~., data = df, nvmax = 11, nbest=1, method = &quot;exhaustive&quot;) smodels &lt;- summary(models) head(smodels$which[,1:10]) ## (Intercept) Year Trachurus air slp sst vwnd wspd3 BOP FIP ## 1 TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## 2 TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE ## 3 TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE ## 4 TRUE TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE TRUE ## 5 TRUE TRUE TRUE TRUE FALSE FALSE TRUE FALSE FALSE TRUE ## 6 TRUE TRUE FALSE TRUE FALSE FALSE TRUE FALSE TRUE TRUE Next we compute AIC and AICc from BIC. k is the number of parameters. We need to add one more parameter for the estimated variance. k &lt;- apply(smodels$which,1,sum)+1 mod.aicc &lt;- smodels$bic+k*(2+(2*k+2)/(23-k-1))-log(23)*k mod.aic &lt;- smodels$bic+k*2-log(23)*k Now we will plot the metrics for each model size. BIC, AICc and Mallow’s Cp all chose models with an intercept and 3 variables: Year, Trachurus and FIP. AIC selects a much larger model, however with \\(n=23\\), AICc would be a better choice. To find the best model, find the row of the smodels matrix where AICc is the smallest. For example, here is the best model with AICc. rmin &lt;- which(mod.aicc==min(mod.aicc)) colnames(smodels$which)[smodels$which[rmin,]] ## [1] &quot;(Intercept)&quot; &quot;Year&quot; &quot;Trachurus&quot; &quot;FIP&quot; 11.3.5 Model selection with cross-validation1 Variable selection (forward, backward, stepwise) is known to overfit models and variables will be chosen that just happen to have high correlation with your response variable for your particular dataset. The result is models with low out-of-sample predictive accuracy. Cross-validation is a way to try to deal with that problem. Model selection with cross-validation estimates the out-of-sample predictive performance of a process for building a model. So for example, you could use cross-validation to ask the question, “If I select a best model with AIC does that approach led to models with better predictive performance over selecting a best model with BIC?”. The basic idea behind cross-validation is that part of the data is used for fitting (training) the model and the left-out data is used for assessing predictions. You predict the left-out data and compare the actual data to the predictions. There are two common types of cross-validation: leave-one-out cross-validation (LOOCV) and k-fold cross-validationa. Leave-one-out cross-validation (LOOCV) is a cross-validation where you leave one data point out, fit to the rest of the data, predict the left out data point, and compute the prediction error with prediction minus actual data value. This is repeated for all data points. So you will have \\(n\\) prediction errors if you have \\(n\\) data points. From these errors, you can compute various statistics. Root mean squared error (RMSE), mean squared error (MSE), and mean absolute error (MAE) are common. k-fold cross-validation is a cross-validation where you divide the data into k equal fractions. The model is fit k times: each fraction is treated as a test data set and the other k-1 fractions are used as the training data. When the model is fit, you predict the data in the test data and compute the prediction errors. Then you’ll compute the statistics (RMSE, MSE, etc) from the errors from all k training sets. There are many different ways you can split your data into k fractions. Thus one often repeats this process many times and uses the average. This is called repeated cross-validation. Example code Let’s see an example of this using models fit via stepwise variable selection using leaps::regsubsets(). Let’s start by defining a predict function for regsubsets objects2. predict.regsubsets &lt;- function(object, newdata, id, ...) { form &lt;- as.formula(object$call[[2]]) mat &lt;- model.matrix(form, newdata) coefi &lt;- leaps:::coef.regsubsets(object, id = id) mat[, names(coefi)] %*% coefi } Next we set up a matrix that defines the folds. Each row has numbers 1 to k (folds) which specify which data points are in the test set. The other (non-k) data points will be the training set. Each row of folds is a different replicate of the repeated cross-validation. nfolds &lt;- 5 nreps &lt;- 20 a &lt;- matrix(NA, nreps, nrow(df)) for(i in 1:nreps) folds[i,] &lt;- sample(rep(1:nfolds, length = nrow(df))) Now we can use df[folds[r,]==k] to specify the test data for the k-th fold of the r-th replicate. And df[folds[r,]!=k] is the training dataset for the k-th fold of the r-th replicate. The fold jargon is just another word for group. We divide the data into k groups and we call each group a fold. Next we set up a matrix to hold the prediction errors. We will have prediction errors for each fold, each replicate, and each variable (columns). nvmax &lt;- 8 cv.errors &lt;- matrix(0, nreps*nfolds, nvmax) Now, we step through each replicate and each fold in each replicate. We find the best fit with regsubsets() applied to the training set for that replicate. Then we predict using that best fit to the test data for that replicate. We compute the errors (prediction minus data) and store. When we are done, we compute the RMSE (or whatever metric we want). for(r in 1:nreps){ for (k in 1:nfolds) { traindat &lt;- df[folds[r,]!=k,] testdat &lt;- df[folds[r,]==k,] best.fit &lt;- leaps::regsubsets(anchovy ~ ., data=traindat, nvmax = nvmax, method = &quot;seqrep&quot;) for (i in 1:nvmax) { pred &lt;- predict.regsubsets(best.fit, testdat, id = i) cv.errors[r+(k-1)*nreps, i] &lt;- mean((testdat$anchovy - pred)^2) } } } rmse.cv &lt;- sqrt(apply(cv.errors, 2, mean, na.rm=TRUE)) plot(1:nvmax, rmse.cv, pch = 19, type = &quot;b&quot;,xlab=&quot;Number of Variables&quot;, ylab=&quot;RMSE&quot;) The model size with the best predictive performance is smaller, intercept plus 2 variables instead of intercept plus 3 variables. This suggests that we should constrain our model size to 2 variables (plus intercept). Note, that with a 5-fold crossvalidation, we were fitting the models to 19 data points instead of 23. However, even with a 23-fold crossvalidation (Leave One Out CV), a model with 2 variables has the lowest RMSE. The best fit 2 variable model has Year and FIP. best.fit &lt;- leaps::regsubsets(anchovy ~ ., data=traindat, nvmax = 2, method = &quot;seqrep&quot;) tmp &lt;- summary(best.fit)$which colnames(tmp)[tmp[2,]] ## [1] &quot;(Intercept)&quot; &quot;Year&quot; &quot;FIP&quot; Cross-validation with caret package The caret package allows us to do this easily. trainControl specifies the type of cross-validation and tuneGrid specifies the parameter over which cross-validation will be done (in this case the size of the model). We use the train() function to fit the models and do the cross-validation. library(caret) # Set up repeated k-fold cross-validation train.control &lt;- trainControl(method = &quot;repeatedcv&quot;, number=5, repeats=20) # Train the model step.model &lt;- train(anchovy~., data = df, method = &quot;leapSeq&quot;, tuneGrid = data.frame(nvmax = 1:nvmax), trControl = train.control ) plot(step.model$results$RMSE, pch = 19, type = &quot;b&quot;, ylab=&quot;RMSE&quot;) The $results part of the output shows us the cross-validation metrics. Best depends on the metric we use. A 2-parameter model is best for all the error metrics except R-squared. step.model$results ## nvmax RMSE Rsquared MAE RMSESD RsquaredSD MAESD ## 1 1 0.2000660 0.8643812 0.1696020 0.06341074 0.10858801 0.05810645 ## 2 2 0.1936095 0.8844205 0.1707378 0.05515394 0.08396911 0.05253262 ## 3 3 0.1977954 0.8473030 0.1660986 0.06592483 0.14851023 0.06005397 ## 4 4 0.2147839 0.8172214 0.1767544 0.06217164 0.16770023 0.05758683 ## 5 5 0.2280267 0.7875699 0.1884736 0.06547948 0.19615580 0.06111186 ## 6 6 0.2189320 0.7847695 0.1810211 0.06757280 0.19858767 0.06147074 ## 7 7 0.2228613 0.7775643 0.1861161 0.07374390 0.21324582 0.06503552 ## 8 8 0.2230425 0.7831957 0.1876751 0.06979281 0.20591050 0.05919506 The best 2-parameter model has Year and FIP. coef(step.model$finalModel, id=2) ## (Intercept) Year FIP ## -0.01122016 0.07297605 1.04079295 11.3.6 Penalized regression: ridge regression The problems with model selection using searching and selecting with some model fit criteria is that the selected model tends to be over-fit—even when using cross-validation The p-values are not correct and the predictive value of the model is not optimal because of over-fitting. One approach to dealing with variance inflation that arises from collinearity and models with many explanatory variable is penalized regression. First, let’s look at ridge regression. The basic idea with penalized regression is that you penalize coefficient estimates that are far from 0. The true coefficients are (likely) not 0 so fundamentally this will lead to biased coefficient estimates but the idea is that the inflated variance of the coefficient estimates is the bigger problem. With ridge regression, we will assume that the coefficients have a mean of 0 and a variance of \\(1/\\lambda\\). This is our prior on the coefficients. The \\(\\beta_i\\) are the most probable values given the data and the prior. Note, there are many other ways to derive ridge regression. We will use the glmnet package to fit the anchovy catch with ridge regression. To fit with a ridge penalty, we set alpha=0. library(glmnet) resp &lt;- colnames(dfz)!=&quot;anchovy&quot; x &lt;- as.matrix(dfz[,resp]) y &lt;- as.matrix(dfz[,&quot;anchovy&quot;]) fit.ridge &lt;- glmnet(x, y, family=&quot;gaussian&quot;, alpha=0) We need to choose a value for the penalty parameter \\(\\lambda\\) (called s in coef.glmnet()). If \\(\\lambda\\) is large, then our prior is that the coefficients are very close to 0. If our \\(\\lambda\\) is small, then our prior is less informative. We can use cross-validation to choose \\(\\lambda\\). This chooses a \\(\\lambda\\) that gives us the lowest out of sample errors. cv.glmnet() will do k-fold cross-validation and report the MSE. We pick the \\(\\lambda\\) with the lowest MSE (lambda.min) or the largest value of \\(\\lambda\\) such that error is within 1 s.e. of the minimum (lambda.1se). This value is computed via cross-validation so will vary. We will take the average over a number of runs; here 20 for speed but 100 is better. Once we have a best \\(\\lambda\\) to use, we can get the coefficients at that value. n &lt;- 20; s &lt;- 0 for(i in 1:n) s &lt;- s + cv.glmnet(x, y, nfolds=5, alpha=0)$lambda.min s.best &lt;- s/n coef(fit.ridge, s=s.best) ## 12 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## 1 ## (Intercept) -9.969433e-15 ## Year 5.266078e-01 ## Trachurus -1.740663e-01 ## air 1.872741e-01 ## slp -7.821741e-02 ## sst -8.785017e-02 ## vwnd 7.888935e-02 ## wspd3 2.703709e-02 ## BOP 9.790106e-02 ## FIP 1.118943e-01 ## HPP 3.023657e-01 ## TOP 2.354273e-01 I will plot the standardized coefficients for the ordinary least squares coefficients against the coefficients using ridge regression. This shows the problem caused by the highly collinear TOP and HPP. They have highly inflated coefficient estimates that are offset by an inflated Year coefficient (in the opposite direction). This is why we need to evaluate collinearity in our variables before fitting a linear regression. With ridge regression, all the estimates have shrunk towards 0 (as they should) but the collinear variables still have very large coefficients. 11.3.7 Penalized regression: Lasso In ridge regression, the coefficients will be shrunk towards 0 but none will be set to 0 (unless the OLS estimate happens to be 0). Lasso is a type of regression that uses a penalty function where 0 is an option. Lasso does a combination of variable selection and shrinkage. We can do lasso with glmnet() by setting alpha=1. fit.lasso &lt;- glmnet(x, y, family=&quot;gaussian&quot;, alpha=1) We select the best \\(\\lambda\\) as we did for ridge regression using cross-validation. n &lt;- 20; s &lt;- 0 for(i in 1:n) s &lt;- s + cv.glmnet(x, y, nfolds=5, alpha=1)$lambda.min s.best &lt;- s/n coef.lasso &lt;- as.vector(coef(fit.lasso, s=s.best))[-1] We can compare to the estimates from ridge and OLS and see that the model is now more similar the models we got from stepwise variable selection. The main difference is that slp is included as a variable. Lasso has estimated a model that is similar to what we got with stepwise variable selection without removing the collinear variables from our data set. Year, air temperature, slp and FIP are the most important variables. 11.3.8 Penalized regression: Elastic net Elastic net is uses both L1 and L2 regularization. Elastic regression generally works well when we have a big dataset. We do not have a big dataset but we will try elastic net. You can tune the amount of L1 and L2 mixing by adjusting alpha but for this example, we will just use alpha=0.5. fit.en &lt;- glmnet(x, y, family=&quot;gaussian&quot;, alpha=0.5) n &lt;- 20; s &lt;- 0 for(i in 1:n) s &lt;- s + cv.glmnet(x, y, nfolds=5, alpha=0.5)$lambda.min s.best &lt;- s/n coef.en &lt;- as.vector(coef(fit.en, s=s.best))[-1] As we might expect, elastic net is part way between the ridge regression model and the Lasso model. 11.3.9 Model selection with prior knowledge In Section 4.7.7 of (Harrell 2015), a rule of thumb (based on shrinkage) for the number of predictors that can be used without overfitting is given: \\((LR-p)/9\\) where \\(LR\\) is the likelihood ratio test \\(\\chi^2\\) of the full model against the null model with only intercept and \\(p\\) is the number of variables in the full model. null &lt;- lm(anchovy ~ 1, data=df) full &lt;- lm(anchovy ~ ., data=df) a &lt;- lmtest::lrtest(null, full) (a$Chisq[2]-a$Df[2])/9 ## [1] 6.239126 This rule of thumb suggests that we could include six variables. Let’s try sardine, SST, BOP, HPP, and Trachurus. fit.prior &lt;- lm(anchovy ~ sardine+BOP+HPP+Trachurus, data=df.full) 11.3.10 Comparing model prediction accuracy 11.3.11 MREG of first or second differences In the multivariate regression with ARMA errors, the response variable \\(x_t\\) is not necessarily stationary since the covariates \\(c_t\\)’s need not be stationary. If we wish to model the first or second differences of \\(x_t\\), then we are potentially modeling a stationary process if differencing leads to a stationary process. We need to think carefully about how we set up a multivariate regression if our response variable is stationary. One recommendation is if \\(x_t\\) is differenced, the same differencing is applied to the covariates. The idea is if the response variable is stationary, we want to make sure that the independent variables are also stationary. However, in a fisheries application \\(x_t - x_{t-1}\\) often has a biological meaning, the yearly (or monthly or hourly) rate of change, and that rate of change is what one is trying explain with a covariate. One would not necessarily expect the first difference to be stationary and one is trying to explain any trend in the one-step rate of change with some set of covariates. On the other hand, if the response variable, the raw data or the first or second difference, is stationary then trying to explain its variability via a non-stationary covariate will clearly lead to the effect size of the covariates being zero. We don’t need to fit a model to tell us that. 11.3.12 Creating the data frame for model fitting Code to make the df data frame used in the model fitting functions. # response df &lt;- data.frame(anchovy=anchovy$log.metric.tons, Year=sardine$Year) df &lt;- subset(df, Year&gt;=1965 &amp; Year&lt;=1987) # biological covariates df.bio &lt;- subset(landings, Species==&quot;Horse.mackerel&quot;)[,c(&quot;Year&quot;,&quot;log.metric.tons&quot;)] df.bio &lt;- subset(df.bio, Year&gt;=1964 &amp; Year&lt;=1986)[,-1,drop=FALSE] # [,-1] to remove year colnames(df.bio) &lt;- &quot;Trachurus&quot; # environmental covariates covsmean.year[,&quot;vwnd.m/s&quot;]&lt;- abs(covsmean.year[,&quot;vwnd.m/s&quot;]) df.env &lt;- log(subset(covsmean.year, Year&gt;=1964 &amp; Year&lt;=1986)[,-1]) # fishing effort df.fish &lt;- log(subset(fish.cov, Year&gt;=1964 &amp; Year&lt;=1986)[,-1]) purse.cols &lt;- stringr::str_detect(colnames(df.fish),&quot;Purse.seiners&quot;) df.fish &lt;- df.fish[,purse.cols] df.fish &lt;- df.fish[!(colnames(df.fish)==&quot;Purse.seiners.VAP&quot;)] # assemble df &lt;- data.frame( df, df.bio, df.env, df.fish ) df$Year &lt;- df$Year-df$Year[1]+1 colnames(df) &lt;- sapply(colnames(df), function(x){rev(str_split(x,&quot;Purse.seiners.&quot;)[[1]])[1]}) colnames(df) &lt;- sapply(colnames(df), function(x){str_split(x,&quot;[.]&quot;)[[1]][1]}) df &lt;- df[,colnames(df)!=&quot;VAP&quot;] This section and the R code was adapted from and influenced by Chapter 6 material in Introduction to Statistical Learning by James, Witten, Hastie and Tibshirani. They have an (free) online course and (free) textbook at http://www-bcf.usc.edu/~gareth/ISL/↩ This function was copied from the Introduction to Statistical Learning material.↩ "]
]
